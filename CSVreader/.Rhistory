data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_decision )]
data1 <- na.omit(data1)
train_cnt <- round(0.9 * nrow(data1))
set.seed(input$seed)
train_index <- sample(1:nrow(data1), train_cnt, replace = F)
train <- data1[train_index, ]
test <- data1[-train_index, ]
test_label <- factor(data1[-train_index, input$in_sel_label_decision])
if (input$in_sel_model_decision == 'Tree'){
model <- C5.0(train[,-which(colnames(data1) ==input$in_sel_label_decision)],
factor(train[ , input$in_sel_label_decision]), trials=input$trials ,
control = C5.0Control(winnow = input$dependents_selwinnow_decision, seed = input$seed))
}
else{
model <- C5.0(train[,-which(colnames(data1) ==input$in_sel_label_decision)],
factor(train[ , input$in_sel_label_decision]), trials=input$trials ,rules = TRUE,
control = C5.0Control(winnow = input$dependents_selwinnow_decision, seed = input$seed))
}
out <- list(model,test,test_label,colnames(data1))
return(out)
})
output$TestTableRender_decision <- renderPrint({
result <- subinput_table_decision()
model <- result[[1]]
test <- result[[2]]
test_label <- result[[3]]
coln <- result[[4]]
predict_result <- predict(model, test[,-which(coln==input$in_sel_label_decision)])
CrossTable(test_label , predict_result)
})
output$TestSummaryRender_decision <- renderPrint({
model <- subinput_table_decision()
summary(model[[1]])
})
output$dependents_delcol_jrip <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_jrip',
label    = "Delete Colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_jrip <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
if (length(input$in_che_delcol_jrip) == 0){
ch <- colnames(data)
}
else{
ch <- colnames(data)[-which(colnames(data) ==input$in_che_delcol_jrip)]
}
selectInput("in_sel_label_jrip","Target",choices = ch)
})
output$dependents_button_jrip <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_jrip","Submit")
})
output$submit_input_sample_jrip <- renderPrint({
req(input$file1)
file1 = input$file1
data <- read.csv(file1$datapath)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_jrip )]
return(head(data1,5))
})
subinput_table_jrip <- eventReactive(input$in_btn_submit_jrip, {
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_jrip )]
data1 <- na.omit(data1)
input_label <-as.formula(paste(colnames(data1[input$in_sel_label_jrip]),"~."))
train_cnt <- round(0.75*dim(data1)[1])
set.seed(input$seed)
train_index <- sample(1:dim(data1)[1], train_cnt, replace = F)
train <- data1[train_index, ]
test <- data1[-train_index, ]
test_label <- factor(data1[-train_index, input$in_sel_label_jrip])
model <- JRip(input_label,data=train, control = Weka_control(O = input$numopt))
out <- list(model,test,test_label,colnames(data1))
return(out)
})
output$TestTableRender_jrip <- renderPrint({
result <- subinput_table_jrip()
model <- result[[1]]
test <- result[[2]]
test_label <- result[[3]]
coln <- result[[4]]
predict_result <- predict(model, test[,-which(coln==input$in_sel_label_jrip)])
CrossTable(test_label , predict_result)
})
output$TestSummaryRender_jrip <- renderPrint({
model <- subinput_table_jrip()
summary(model[[1]])
})
output$dependents_delcol_kmeans <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_kmeans',
label    = "Delete Colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_kmeans <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
if (length(input$in_che_delcol_kmeans) == 0){
ch <- colnames(data)
}
else{
ch <- colnames(data)[-which(colnames(data) ==input$in_che_delcol_kmeans)]
}
selectInput("in_sel_label_kmeans","Target",choices = ch)
})
output$dependents_button_kmeans <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_kmeans","Submit")
})
output$submit_input_sample_kmeans <- renderPrint({
req(input$file1)
file1 = input$file1
data <- read.csv(file1$datapath)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_kmeans )]
return(head(data1,5))
})
output$TestSummaryRender_kmeans <- renderPrint({
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_kmeans )]
data1 <- na.omit(data1)
summary(data1)
})
subinput_table_kmeans <- eventReactive(input$in_btn_submit_kmeans, {
set.seed(input$seed)
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_kmeans )]
data1 <- na.omit(data1)
input_label <-  colnames(data1[input$in_sel_label_kmeans])
data1_n <- data1[  , -which(colnames(data1)==input$in_sel_label_kmeans)]
like_model <- kmeans( data1_n,  input$k_mv ,nstart=input$k_nstart)
out <- list(data1,like_model)
return(out)
})
output$TestTableRender_kmeans <- renderPrint({
result <- subinput_table_kmeans()
data1 <- result[[1]]
model <- result[[2]]
x <- cbind(data1[ , which(colnames(data1)==input$in_sel_label_kmeans)] , model$cluster)
x2 <- data.frame(x)
table(x2,dnn=c('Test Data','Predict Result'))
})
output$TestCenterRender_kmeans <- renderPrint({
result <- subinput_table_kmeans()
model <- result[[2]]
model$centers
})
output$plot_kmeans <- renderPlot({
result <- subinput_table_kmeans()
data <- result[[1]]
model <- result[[2]]
data_wo_label <- data[,-which(colnames(data)==input$in_sel_label_kmeans)]
plot(data_wo_label,pch=model$cluster,col=model$cluster)
},height=len)
output$dependents_delcol_knn <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_knn',
label    = "Delete Colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_knn <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
if (length(input$in_che_delcol_knn) == 0){
ch <- colnames(data)
}
else{
ch <- colnames(data)[-which(colnames(data) ==input$in_che_delcol_knn)]
}
selectInput("in_sel_label_knn","Target",choices = ch)
})
output$dependents_button_knn <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_knn","Submit")
})
output$submit_input_sample_knn <- renderPrint({
req(input$file1)
file1 = input$file1
data <- read.csv(file1$datapath)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_knn )]
return(head(data1,5))
})
output$TestSummaryRender_knn <- renderPrint({
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_knn )]
data1 <- na.omit(data1)
summary(data1)
})
normalize <- function(x) {
return (( x - min(x)) / (max(x) -min(x)))
}
subinput_table_knn <- eventReactive(input$in_btn_submit_knn, {
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors =FALSE)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_kmeans )]
data1 <- na.omit(data1)
data1<-as.data.frame(lapply(data1[,-which(colnames(data1)==input$in_sel_label_knn)], normalize))
train_index = as.integer(trunc(nrow(data1) *0.8))
train <- data1[1:as.integer(train_index), ]
test <- data1[as.integer(train_index+1):as.integer(nrow(data1)), ]
train_label <-data[1:as.integer(train_index),which(colnames(data)==input$in_sel_label_knn)]
test_label <- data[as.integer(train_index+1):as.integer(nrow(data1)),which(colnames(data)==input$in_sel_label_knn) ]
train_label <- factor(train_label)
if (is.numeric(input$knn_k) == F){
kk <- round(sqrt(length(train)))
}
else{
kk <- input$knn_k
}
result <-  knn(train=train , test=test , cl=train_label, k= kk)
cross_table <- CrossTable(test_label , result, prop.chisq=FALSE )
return(cross_table)
})
output$TestTableRender_knn <- renderPrint({
subinput_table_knn()
})
output$dependents_delcol_naive <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_naive',
label    = "Delete Colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_naive <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
if (length(input$in_che_delcol_naive) == 0){
ch <- colnames(data)
}
else{
ch <- colnames(data)[-which(colnames(data) ==input$in_che_delcol_naive)]
}
selectInput("in_sel_label_naive","Target",choices = ch)
})
output$dependents_button_naive <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_naive","Submit")
})
output$submit_input_sample_naive <- renderPrint({
req(input$file1)
file1 = input$file1
data <- read.csv(file1$datapath)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_naive )]
return(head(data1,5))
})
subinput_table_naive <- eventReactive(input$in_btn_submit_naive, {
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_naive )]
data1 <- na.omit(data1)
input_label <-as.formula(paste(colnames(data1[input$in_sel_label_naive]),"~."))
train_cnt <- round(0.7 * dim(data1)[(colnames(data) %in% input$in_sel_label_naive)])
set.seed(input$seed)
train_index <- sample(1:dim(data1)[(colnames(data) %in% input$in_sel_label_naive)], train_cnt, replace = F)
train <- data1[train_index, ]
test <- data1[-train_index, ]
model <-  naiveBayes(input_label , data = train ,laplace = input$laplace )
out <- list(model,colnames(data1),test)
return(out)
})
output$TestTableRender_naive <- renderPrint({
result <- subinput_table_naive()
model <- result[[1]]
coln <- result[[2]]
test <- result[[3]]
test_label <- test[,(coln %in% input$in_sel_label_naive )]
predict_result <- predict(model, test[,!(coln %in% input$in_sel_label_naive )] )
CrossTable(test_label , predict_result)
})
output$TestModelRender_naive <- renderPrint({
result <- subinput_table_naive()
result[[1]]
})
output$dependents_delcol_neuralnet <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_neuralnet',
label    = "Delete Colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_neuralnet <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
if (length(input$in_che_delcol_naive) == 0){
ch <- colnames(data)
}
else{
ch <- colnames(data)[-which(colnames(data) ==input$in_che_delcol_naive)]
}
selectInput("in_sel_label_neuralnet","Target",choices = ch)
})
output$dependents_type_neuralnet <- renderUI({
selectInput("in_sel_type_neuralnet","Target Type",choices = c('Numeric','Character'))
})
output$dependents_button_neuralnet <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_neuralnet","Submit")
})
output$submit_input_sample_neuralnet <- renderPrint({
req(input$file1)
file1 = input$file1
data <- read.csv(file1$datapath)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_neuralnet )]
return(head(data1,5))
})
subinput_table_neuralnet <- eventReactive(input$in_btn_submit_neuralnet, {
req(input$file1)
file1 = input$file1
data = read.csv(file1$datapath,stringsAsFactors = T)
data1 <- data[,!(colnames(data) %in% input$in_che_delcol_neuralnet )]
data1 <- na.omit(data1)
input_label <-as.formula(paste(colnames(data1[input$in_sel_label_neuralnet]),"~."))
train_cnt <- round(0.75*dim(data1)[1])
set.seed(input$seed)
train_index <- sample(1:dim(data1)[1], train_cnt, replace = F)
normalize <- function(x) {
return ( (x-min(x)) / (max(x) - min(x) ) )
}
if (input$in_sel_type_neuralnet == 'Numeric'){
data1_norm <- as.data.frame(lapply(data1,normalize) )
}
else{
data1_norm <- data.frame(data1[, input$in_sel_label_neuralnet],scale(data1[,!(colnames(data) %in%input$in_sel_label_neuralnet)]))
colnames(data1_norm)[1] <- c(input$in_sel_label_neuralnet)
}
train <- data1_norm[train_index, ]
test <- data1_norm[-train_index, ]
test_label <- factor(data1_norm[-train_index, input$in_sel_label_neuralnet])
model <- neuralnet(formula = input_label, data =train, hidden = c(input$hidden_1,input$hidden_2) )
out <- list(model,test,data1)
return(out)
})
output$TestAccuracyRender_neuralnet <- renderPrint({
result <- subinput_table_neuralnet()
model <- result[[1]]
test <- result[[2]]
data <- result[[3]]
if (input$in_sel_type_neuralnet == 'Numeric'){
model_results <-  neuralnet::compute(model, test[,!(colnames(test) %in%input$in_sel_label_neuralnet)])
results <- data.frame(actual = test[,input$in_sel_label_neuralnet], prediction = model_results$net.result)
predicted=results$prediction * abs(diff(range(data[,input$in_sel_label_neuralnet]))) + min(data[,input$in_sel_label_neuralnet])
actual=results$actual * abs(diff(range(data[,input$in_sel_label_neuralnet]))) + min(data[,input$in_sel_label_neuralnet])
comparison=data.frame(predicted,actual)
deviation=((actual-predicted)/actual)
comparison=data.frame(predicted,actual,deviation)
accuracy=1-abs(mean(deviation))
data.frame(Accuracy = accuracy,row.names='')
}
else{
model_results <-  neuralnet::compute(model, test[,!(colnames(test) %in%input$in_sel_label_neuralnet)])
predicted <-  model_results$net.result
predicted_label <- 0
correct <- 0
for(i in seq(nrow(predicted))){
predicted_label <- which(predicted[i,]==max(predicted[i,]))
if (as.numeric(as.factor(test[,input$in_sel_label_neuralnet]))[i]==predicted_label) correct <- correct + 1
}
accuracy <- correct/nrow(test)
data.frame(Accuracy = accuracy,row.names='')
}
})
output$TestTableRender_neuralnet <- renderPrint({
result <- subinput_table_neuralnet()
model <- result[[1]]
test <- result[[2]]
data <- result[[3]]
if (input$in_sel_type_neuralnet == 'Numeric'){
model_results <-  neuralnet::compute(model, test[,!(colnames(test) %in%input$in_sel_label_neuralnet)])
results <- data.frame(actual = test[,input$in_sel_label_neuralnet], prediction = model_results$net.result)
results
}
else{
model_results <-  neuralnet::compute(model, test[,!(colnames(test) %in%input$in_sel_label_neuralnet)])
predicted <-  model_results$net.result
predicted_label <- c()
for(i in seq(nrow(predicted))){
predicted_label <- c(predicted_label,which(predicted[i,]==max(predicted[i,])))
}
CrossTable(unlist(test[,input$in_sel_label_neuralnet]),predicted_label,dnn=c('test_label','predicted_label'))
}
})
output$plot_neural <- renderPlot({
result <- subinput_table_neuralnet()
model <- result[[1]]
dev.off()
plot(model)
},height=600)
output$plot_bar <- renderPlot({
table_in<-dataload()
xdata<-as.factor(table_in[,input$in_sel_bar_xVar])
ydata<-as.factor(table_in[,input$in_sel_bar_yVar])
fdata=data.frame(x=xdata,y=ydata)
ggplot(fdata) +
geom_bar(aes_string(x='x',y='y',fill='x'),stat = "identity",show.legend=F)
})
output$plot_pie <- renderPlotly({
table_in<-dataload()
plot_ly(table_in, labels = ~table_in[,input$in_sel_pie_xVar],
values = ~table_in[,input$in_sel_pie_yVar],type='pie')
})
output$plot_line <- renderPlotly({
table_in<-dataload()
x <- list(title = input$in_sel_line_xVar)
y <- list(title = input$in_sel_line_yVar)
plot_ly(data = table_in,x=~table_in[,input$in_sel_line_xVar],y=~table_in[,input$in_sel_line_yVar],type='scatter',mode='dot')%>%
layout(xaxis = x, yaxis = y)
})
output$plot_scatter <- renderPlot({
table_in<-dataload()
xyplot(table_in[,input$in_sel_scatter_yVar]~table_in[,input$in_sel_scatter_xVar], grid=T,type=c('p'),col.line='darkorange',lwd=2, xlab=input$in_sel_scatter_xVar,ylab=input$in_sel_scatter_yVar)
})
output$text_scatter <- renderText({
table_in<-dataload()
paste("The correlation between the two is: ", cor(table_in[,input$in_sel_scatter_yVar],table_in[,input$in_sel_scatter_xVar]))
})
output$plot_box <- renderPlot({
table_in<-dataload()
bwplot(table_in[,input$in_sel_box_xVar],xlab=input$in_sel_box_xVar)
})
output$text_box <- renderPrint({
table_in<-dataload()
dataset <- table_in[,input$in_sel_box_xVar]
summary(dataset)
})
output$dependents_delcol_pairs <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
checkboxGroupInput(inputId  = 'in_che_delcol_pairs',
label    = "Delete colmun",
choices  = colnames(data),
selected = 'null',
inline   = FALSE
)
})
output$dependents_selcol_pairs <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
ch <- c('None')
for (i in seq(colnames(data))){
if (is.numeric(data[1,i])==F){
ch <- c(ch,colnames(data)[i])
}
}
selectInput("in_sel_label_pairs","Submit",label = 'Select Colour',choices = ch)
})
output$dependents_button_pairs <- renderUI({
data <- dataload()
if (is.null(data)) return(NULL)
actionButton("in_btn_submit_pairs","Submit")
})
subinput_pairs <- eventReactive(input$in_btn_submit_pairs, {
req(input$file1)
file1 <- input$file1
data <- read.csv(file1$datapath)
data <- data[,!(colnames(data) %in% input$in_che_delcol_pairs )]
if (input$in_sel_label_pairs == 'None'){
pa <- ggpairs(data,aes_string(alpha=input$alpha))
}
else {
pa <- ggpairs(data,aes_string(colour = input$in_sel_label_pairs, alpha=input$alpha))
}
return(pa)
})
output$plot_pairs <- renderPlot({
subinput_pairs()
},height=len)
}
setwd("C:\\Users\\icecr\\OneDrive\\R\\CSVreader")
library(shiny)
shinyApp(ui = ui, server = server)
#deployApp()
getwd()
library(rsconnect)
rsconnect::setAccountInfo(name='paka',
token='FBAE2BFC60F96318CC38531FA5F7B78C',
secret='m0SEPGmLcGQxr9EmaMWEs9W5sqAz/67pPOB9ATEh')
rsconnect::deployApp('C:\\Users\\icecr\\OneDrive\\R\\CSVreader',appName = "csvreader")
